# _autostart.py â€” bootstrap pulito PTB v20
import os, asyncio, logging, inspect
from typing import List
from telegram import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

async def _default_start(update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg: return
kb = [
        [KeyboardButton("/newgig"), KeyboardButton("/mygigs")],
        [KeyboardButton("/buy"),    KeyboardButton("/release")],
        [KeyboardButton("/help"),   KeyboardButton("/cancel")],
    ]
    await update.message.reply_text(
        "Benvenuto su Escrow Gigs Bot ðŸ‘‹\nScegli un'azione:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

def _wrap(f):
    if f is None:
        return None
    if inspect.iscoroutinefunction(f):
        return f
    async def _w(u, c):
        return f(u, c)
    return _w

def _register_handlers(app):
    # se esistono funzioni nel vecchio telegram_bot, le uso; altrimenti fallback
    try:
        from app import telegram_bot as tb
    except Exception:
        tb = None
    start = _default_start
    app.add_handler(CommandHandler("start", start))
    for name in ("help","buy","newgig","mygigs","release","cancel"):
        fn = getattr(tb, f"cmd_{name}", None)
        if fn:
            app.add_handler(CommandHandler(name, _wrap(fn)))

async def run_bot_background():
    """Avvia il bot in polling PTB v20 senza bloccare FastAPI."""
    token = os.getenv("TELEGRAM_TOKEN", "").strip()
    if not token:
        logging.warning("TELEGRAM_TOKEN non impostato: bot NON avviato (app up).")
        return

    app = ApplicationBuilder().token(token).build()
    _register_handlers(app)

    # Menu comandi (pulsante 'Menu' in Telegram)
    commands: List[BotCommand] = [
        BotCommand("start",   "Apri menu"),
        BotCommand("help",    "Aiuto"),
        BotCommand("newgig",  "Crea annuncio"),
        BotCommand("mygigs",  "I miei annunci"),
        BotCommand("buy",     "Acquista/Deposita"),
        BotCommand("release", "Rilascia escrow"),
        BotCommand("cancel",  "Annulla"),
    ]

    await app.initialize()
    await app.start()
    await app.bot.delete_webhook(drop_pending_updates=True)
    try:
        await app.bot.set_my_commands(commands)
    except Exception:
        pass

    # polling in background
    await app.updater.start_polling()
    try:
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        pass
    finally:
        try:
            await app.updater.stop()
        except Exception:
            pass
        await app.stop()
        await app.shutdown()
