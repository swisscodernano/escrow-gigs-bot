#!/bin/bash
set -euo pipefail

APP=app
APP_PATH=/app/app
FILE=telegram_bot.py
TS=$(date +%Y%m%d-%H%M%S)
mkdir -p _backups

echo "==> Prelevo ${FILE} dal container e salvo backup..."
docker compose cp "$APP:$APP_PATH/$FILE" "./$FILE.work"
cp "./$FILE.work" "_backups/$FILE.$TS.bak"

echo "==> Patch DETACHED: sostituisco .format(amt=...,asset=...,addr=...,oid=...)"
sed -i 's/\.format(amt=g\.price_usd, asset=g\.currency, addr=o\.deposit_address, oid=o\.id)/.format(**_hotfix_values(g,o))/g' "$FILE.work"

echo "==> Aggiungo helper _hotfix_values() se assente..."
if ! grep -q '_HOTFIX_CMD_BUY_VALUES' "$FILE.work"; then
  printf '\n# ===== HOTFIX: detached values helper =====\n' >> "$FILE.work"
  printf 'def _hotfix_values(g, o):  # _HOTFIX_CMD_BUY_VALUES\n' >> "$FILE.work"
  printf '    try:\n' >> "$FILE.work"
  printf '        try:\n' >> "$FILE.work"
  printf '            from app.db import SessionLocal\n' >> "$FILE.work"
  printf '        except Exception:\n' >> "$FILE.work"
  printf '            from db import SessionLocal\n' >> "$FILE.work"
  printf '        with SessionLocal() as _s:\n' >> "$FILE.work"
  printf '            g2 = _s.merge(g, load=True)\n' >> "$FILE.work"
  printf '            o2 = _s.merge(o, load=True)\n' >> "$FILE.work"
  printf '            return {\n' >> "$FILE.work"
  printf '                "amt": getattr(g2, "price_usd", None),\n' >> "$FILE.work"
  printf '                "asset": getattr(g2, "currency", None),\n' >> "$FILE.work"
  printf '                "addr": getattr(o2, "deposit_address", None),\n' >> "$FILE.work"
  printf '                "oid": getattr(o2, "id", None),\n' >> "$FILE.work"
  printf '            }\n' >> "$FILE.work"
  printf '    except Exception:\n' >> "$FILE.work"
  printf '        return {\n' >> "$FILE.work"
  printf '            "amt": getattr(g, "price_usd", None),\n' >> "$FILE.work"
  printf '            "asset": getattr(g, "currency", None),\n' >> "$FILE.work"
  printf '            "addr": getattr(o, "deposit_address", None),\n' >> "$FILE.work"
  printf '            "oid": getattr(o, "id", None),\n' >> "$FILE.work"
  printf '        }\n' >> "$FILE.work"
fi

echo "==> Sovrascrivo run_bot_background() con versione async robusta..."
printf '\n# ===== HOTFIX: robust run_bot_background (PTB v20 async; v13 fallback) =====\n' >> "$FILE.work"
printf 'async def run_bot_background():\n' >> "$FILE.work"
printf '    import os, asyncio, logging\n' >> "$FILE.work"
printf '    try:\n' >> "$FILE.work"
printf '        from telegram.ext import ApplicationBuilder, CommandHandler\n' >> "$FILE.work"
printf '        PTB20 = True\n' >> "$FILE.work"
printf '    except Exception:\n' >> "$FILE.work"
printf '        PTB20 = False\n' >> "$FILE.work"
printf '    token = os.getenv("TELEGRAM_TOKEN", "").strip()\n' >> "$FILE.work"
printf '    if not token:\n' >> "$FILE.work"
printf '        logging.warning("TELEGRAM_TOKEN non impostato: bot NON avviato (app up).")\n' >> "$FILE.work"
printf '        return\n' >> "$FILE.work"
printf '    if PTB20:\n' >> "$FILE.work"
printf '        app = ApplicationBuilder().token(token).build()\n' >> "$FILE.work"
printf '        async def _help_wrapper(update, context):\n' >> "$FILE.work"
printf '            try:\n' >> "$FILE.work"
printf '                res = cmd_help(update, context)\n' >> "$FILE.work"
printf '                if hasattr(res, "__await__"):  # compat se cmd_help è async\n' >> "$FILE.work"
printf '                    await res\n' >> "$FILE.work"
printf '            except NameError:\n' >> "$FILE.work"
printf '                await update.message.reply_text("Escrow Gigs Bot — /help")\n' >> "$FILE.work"
printf '        app.add_handler(CommandHandler("help", _help_wrapper))\n' >> "$FILE.work"
printf '        await app.initialize()\n' >> "$FILE.work"
printf '        await app.start()\n' >> "$FILE.work"
printf '        await app.updater.start_polling()\n' >> "$FILE.work"
printf '        try:\n' >> "$FILE.work"
printf '            while True:\n' >> "$FILE.work"
printf '                await asyncio.sleep(3600)\n' >> "$FILE.work"
printf '        except asyncio.CancelledError:\n' >> "$FILE.work"
printf '            pass\n' >> "$FILE.work"
printf '        await app.updater.stop()\n' >> "$FILE.work"
printf '        await app.stop()\n' >> "$FILE.work"
printf '        await app.shutdown()\n' >> "$FILE.work"
printf '    else:\n' >> "$FILE.work"
printf '        import threading\n' >> "$FILE.work"
printf '        from telegram.ext import Updater, CommandHandler\n' >> "$FILE.work"
printf '        def _runner():\n' >> "$FILE.work"
printf '            tkn=os.getenv("TELEGRAM_TOKEN","").strip()\n' >> "$FILE.work"
printf '            if not tkn:\n' >> "$FILE.work"
printf '                logging.warning("TELEGRAM_TOKEN non impostato: bot NON avviato (app up).")\n' >> "$FILE.work"
printf '                return\n' >> "$FILE.work"
printf '            upd=Updater(token=tkn, use_context=True)\n' >> "$FILE.work"
printf '            dp=upd.dispatcher\n' >> "$FILE.work"
printf '            try:\n' >> "$FILE.work"
printf '                dp.add_handler(CommandHandler("help", cmd_help))\n' >> "$FILE.work"
printf '            except Exception:\n' >> "$FILE.work"
printf '                pass\n' >> "$FILE.work"
printf '            upd.start_polling()\n' >> "$FILE.work"
printf '            upd.idle()\n' >> "$FILE.work"
printf '        threading.Thread(target=_runner, daemon=True).start()\n' >> "$FILE.work"

echo "==> Copio nel container e riavvio..."
docker compose cp "./$FILE.work" "$APP:$APP_PATH/$FILE"
docker compose restart "$APP"

echo "==> Log (CTRL+C per uscire) — cerca: 'Telegram bot avviato' e prova /buy"
docker compose logs -f --tail=200 "$APP"
